This assignment took me around 2 hours to complete. 

I ended up using a few libraries that I use most often:
- org.jetbrains.kotlinx:kotlinx-coroutines-android:1.3.9 (for background threads and viewModelScope)
- androidx.activity:activity-ktx:1.3.1 (for retreiving a ViewModel as a lazy delegate)
- viewbinding to replace synthetics.

Below are some quick bullet points I took during the assignment:
- synthetics library refactoring (it's deprecated so I switched to viewbinding instead)
- replace rxjava with coroutine library (I like the syntax more)
- created viewmodel to contain the network calls, threading, and to manage the state of calls for switching between yelp and places
- Photo api implementation. Got hung up on the response value from the retrofit callback (retreiving url)
- used the button listeners to request locations for every 15 items viewed
- fixed a crash where the places API, in some cases, would return a restaurant with an empty image list


For improvements, I have a few basic items that I would've gotten to if I had more time:

- Dealing with screen rotation (like and dislike buttons are resetting after the activity is recreated)
- If the user is tapping through locations too fast, and we have not fetched the next batch of locations. Simple fix would be to show a loading dialog. 
- Handling network errors. i.e. if the response body is null, and adding a timeout window.
- Using kotlin flow or RXjava to emit restaurants as soon as the image comes back from the Places API. Currently, the user has to wait until the entire list has the image fetched. This would allow users to see new locations without having to wait for all the images to load.